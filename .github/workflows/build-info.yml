name: Build Info with JFrog Integration

on:
  push:
    branches: [ main, master, develop, dev ]
  pull_request:
    branches: [ main, master, dev ]
  workflow_dispatch:

env:
  BUILD_NAME: argo-cd-build
  BUILD_NUMBER: ${{ github.run_number }} # Unique build number for each run
  GO_VERSION: '1.25.0'

jobs:
  build-info:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        
    - name: Set up JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      with:
        version: 'latest'
      env:
        JF_URL: ${{ secrets.JF_URL }}
        JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

    - name: Configure Go modules
      run: |
        # Configure JFrog CLI for Go modules if needed
        jf go-config --repo-resolve poc-go --repo-deploy poc-go || echo "No Go repository configured"
        
    - name: Download dependencies with JFrog CLI
      run: |
        - name: Download dependencies with JFrog CLI
          run: |
            jf go mod tidy
            jf go get -v ./...
        - name: Build Go project
          run: |
            jf go build -v ./... --build-name=$BUILD_NAME --build-number=$BUILD_NUMBER --project poc    - name: Build Go project
    - name: Capture name and version
      run: |
        echo GO_MODULE_VERSION=$(cat VERSION || echo "v0.0.0") >> $GITHUB_ENV
        echo GO_MODULE_NAME=$(go list -m | head -n1 | cut -d' ' -f1) >> $GITHUB_ENV
        

    - name: Package build artifacts
      run: |
        # Create build artifacts directory
        mkdir -p build-artifacts
        # Copy built binaries to artifacts
        cp -r dist/* build-artifacts/ 2>/dev/null || echo "No dist directory found"
        # Archive build artifacts if JFrog generic upload is configured
        # jf rt upload "build-artifacts/*" generic-local/ --build-name=$BUILD_NAME --build-number=$BUILD_NUMBER --project poc || echo "No generic repository configured"

    - name: Collect build environment info
      run: |
        jf rt build-collect-env "$BUILD_NAME" "$BUILD_NUMBER" --project poc
        
    - name: Collect VCS information
      run: |
        jf rt build-add-git $BUILD_NAME $BUILD_NUMBER --project=poc
        
    - name: Publish build info to JFrog Artifactory
      run: |
        jf rt build-publish "$BUILD_NAME" "$BUILD_NUMBER" --project poc
        
    - name: Xray Build Scan
      run: |
        jf build-scan $BUILD_NAME $BUILD_NUMBER --format=table --fail=false --project=poc
      continue-on-error: true
    - name: Display build information
      run: |
        echo "### Build Information"
        echo "- **Build Name:** $BUILD_NAME"
        echo "- **Build Number:** $BUILD_NUMBER"
        echo "- **Module:** $GO_MODULE_NAME@$GO_MODULE_VERSION"
        echo "- **Go Version:** ${{ env.GO_VERSION }}"
        echo "- **Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        echo "- **Commit SHA:** ${{ github.sha }}"
        echo "- **Short SHA:** ${GITHUB_SHA:0:7}"
        echo "- **Branch:** ${{ github.ref_name }}"
        echo "- **Repository:** ${{ github.repository }}"
        echo "- **Actor:** ${{ github.actor }}"
    
    - name: Create build info summary
      run: |
        mkdir -p build-artifacts
        cat > build-artifacts/build-summary.json << EOF
        {
          "build_name": "$BUILD_NAME",
          "build_number": "$BUILD_NUMBER",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit_sha": "${{ github.sha }}",
          "commit_short_sha": "${GITHUB_SHA:0:7}",
          "branch_name": "${{ github.ref_name }}",
          "repository": "${{ github.repository }}",
          "actor": "${{ github.actor }}",
          "workflow_run_id": "${{ github.run_id }}",
          "go_version": "${{ env.GO_VERSION }}",
          "module_name": "$GO_MODULE_NAME",
          "module_version": "$GO_MODULE_VERSION"
        }
        EOF
    
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: argo-cd-build-artifacts
        path: |
          dist/
          build-artifacts/
          *.tar.gz
        retention-days: 30
      if: always()